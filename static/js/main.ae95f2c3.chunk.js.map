{"version":3,"sources":["backend_api.js","GeneratedImageList.js","TextPromptInput.js","AvailableModelsInput.js","BackendUrlInput.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["backendUrl","text","numImages","dalleName","a","JsonBigint","fetch","method","headers","body","JSON","stringify","then","response","catch","error","alert","parse","ImageObject","imgData","alt","src","GeneratedImageList","generatedImages","Grid","container","justify","alignItems","spacing","map","generatedImg","index","item","id","withStyles","inputPrompt","minWidth","classes","enterPressedCallback","disabled","useState","promptText","setPromptText","TextField","className","label","helperText","placeholder","value","onChange","event","target","onKeyPress","key","inputModel","marginTop","models","selectedModel","onModelSelected","select","model","MenuItem","inputBackend","loadingSpinner","paddingTop","setBackendValidUrl","setBackendInvalidUrl","isLoadingModels","setBackendUrl","newBackendUrl","str","RegExp","test","useEffect","qsBackendUrl","qs","window","location","search","ignoreQueryPrefix","alignContent","sizeUnit","size","color","loading","root","display","flex","flexDirection","margin","textAlign","title","marginBottom","subtitle","gallery","padding","maxWidth","setModels","setSelectedModel","isFetchingImgs","setIsFetchingImgs","isFetchingModelsList","setIsFetchingModelsList","setGeneratedImages","isBackendUrlValid","getAvailableModels","modelsList","length","Typography","variant","role","aria-label","direction","xs","console","log","callDalleService","generatedImgs","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae95f2c3.chunk.js","sourcesContent":["import JsonBigint from \"json-bigint\";\n\nexport async function callDalleService(backendUrl, text, numImages, dalleName) {\n  return JsonBigint.parse(await (await fetch(backendUrl + `/dalle`, {\n    method: 'POST',\n    headers: {\n      'Bypass-Tunnel-Reminder': \"go\",\n      'mode': 'no-cors'\n    },\n    body: JSON.stringify({\n      text,\n      'num_images': numImages,\n      'model_name': dalleName\n    })\n  }).then(function (response) {\n    return response\n  }).catch((error) => {\n    alert('Error querying DALL-E service. ' + error)\n    throw error\n  })).text())\n}\n\nexport async function getAvailableModels(backendUrl) {\n  return JsonBigint.parse(await (await fetch(backendUrl + `/available-models`, {\n    headers: {\n      'Bypass-Tunnel-Reminder': \"go\",\n      'mode': 'no-cors'\n    }\n  }).then(function (response) {\n    return response\n  }).catch((error) => {\n    alert('Error fetching available models. ' + error)\n    throw error\n  })).text())\n\n}\n","import React from 'react';\nimport {Grid} from \"@material-ui/core\";\n\nconst ImageObject = ({imgData, alt}) => <img src={`data:image/png;base64,${imgData}`} alt={alt}/>\n\nconst GeneratedImageList = ({generatedImages}) => {\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={3}>\n      {generatedImages.map((generatedImg, index) => {\n        return (\n          <Grid item id={index}>\n            <ImageObject imgData={generatedImg} alt={index}/>\n          </Grid>\n        )\n      })\n      }\n    </Grid>\n  )\n}\n\nexport default GeneratedImageList;\n","import React, {useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {TextField} from \"@material-ui/core\";\n\nconst useStyles = () => ({\n  inputPrompt: {\n    minWidth: '450px',\n  },\n})\n\nconst TextPromptInput = ({classes, enterPressedCallback, disabled}) => {\n  const [promptText, setPromptText] = useState('');\n\n  function handleTextPromptKeyPressed(event) {\n    if (event.key === 'Enter') {\n      enterPressedCallback(promptText)\n    }\n  }\n\n  function onTextChanged(event) {\n    setPromptText(event.target.value)\n  }\n\n  return (\n    <TextField className={classes.inputPrompt} id=\"prompt-input\" label=\"Text prompt\" helperText=\"hit Enter to search\"\n               placeholder=\"e.g. an apple on a table\" value={promptText} onChange={onTextChanged}\n               onKeyPress={handleTextPromptKeyPressed} disabled={disabled}/>\n  )\n}\n\nexport default withStyles(useStyles)(TextPromptInput);","import {MenuItem, TextField} from \"@material-ui/core\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport React from \"react\";\n\nconst useStyles = () => ({\n  inputModel: {\n    minWidth: '100px',\n    marginTop: '20px',\n  }\n});\n\n\nconst AvailableModelsInput = ({classes, models, selectedModel, onModelSelected, disabled}) => {\n  return (\n    <TextField className={classes.inputModel} id=\"models-input\" select label=\"Models\" value={selectedModel}\n               onChange={onModelSelected} helperText=\"Pre-trained model to use\" disabled={disabled}>\n      {models && models.map((model) => {\n        return <MenuItem key={model} value={model}>{model}</MenuItem>\n      })}></TextField>\n  )\n}\n\nexport default withStyles(useStyles)(AvailableModelsInput);\n","import React, {useEffect, useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport {isValidURL} from \"./utils\";\nimport {PulseLoader} from \"react-spinners\";\nimport qs from \"qs\";\n\nconst useStyles = () => ({\n  inputBackend: {\n    minWidth: '220px',\n  },\n  loadingSpinner: {\n    paddingTop: '20px !important',\n  }\n})\n\nconst BackendUrlInput = ({classes, setBackendValidUrl, setBackendInvalidUrl, isLoadingModels}) => {\n  const [backendUrl, setBackendUrl] = useState('');\n\n  useEffect(() => {\n    const qsBackendUrl = qs.parse(window.location.search, {ignoreQueryPrefix: true}).backendUrl\n    if (qsBackendUrl) {\n      onChange(qsBackendUrl)\n    }\n  }, [setBackendUrl])\n\n  function onChange(newBackendUrl) {\n    setBackendUrl(newBackendUrl)\n    if (isValidURL(newBackendUrl)) {\n      setBackendValidUrl(newBackendUrl)\n    } else {\n      setBackendInvalidUrl()\n    }\n  }\n\n  return (\n    <Grid container spacing={1} alignContent=\"center\">\n      <Grid item>\n        <TextField className={classes.inputBackend} id=\"standard-basic\" label=\"Backend URL\" value={backendUrl}\n                   onChange={(event) => onChange(event.target.value)}/>\n      </Grid>\n      <Grid item className={classes.loadingSpinner}>\n        <PulseLoader sizeUnit={\"px\"} size={5} color=\"purple\" loading={isLoadingModels}/>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default withStyles(useStyles)(BackendUrlInput);\n","export function isValidURL(str) {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}","import React, {useEffect, useState} from 'react';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {Grid, Typography} from \"@material-ui/core\";\nimport {callDalleService, getAvailableModels} from \"./backend_api\";\nimport GeneratedImageList from \"./GeneratedImageList\";\nimport TextPromptInput from \"./TextPromptInput\";\nimport {PulseLoader} from \"react-spinners\";\n\nimport \"./App.css\";\nimport AvailableModelsInput from \"./AvailableModelsInput\";\nimport BackendUrlInput from \"./BackendUrlInput\";\n\nconst useStyles = () => ({\n  root: {\n    display: 'flex',\n    flex: '1',\n    flexDirection: 'column',\n    margin: '100px 0px 100px 0px',\n    alignItems: 'center',\n    textAlign: 'center',\n  },\n  title: {\n    marginBottom: '20px',\n  },\n  subtitle: {\n    marginBottom: '30px',\n  },\n  gallery: {\n    marginTop: '30px',\n    padding: '10px',\n    maxWidth: '60%',\n  },\n});\n\n\nconst App = ({classes}) => {\n  const [backendUrl, setBackendUrl] = useState('');\n  const [models, setModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useState('');\n  const [isFetchingImgs, setIsFetchingImgs] = useState(false);\n  const [isFetchingModelsList, setIsFetchingModelsList] = useState(false);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const maxImagesPerQuery = 5;\n\n  const isBackendUrlValid = backendUrl !== ''\n\n\n  useEffect(() => {\n        if (isBackendUrlValid) {\n          setIsFetchingModelsList(true)\n          getAvailableModels(backendUrl).then((modelsList) => {\n            setModels(modelsList)\n            if (modelsList && modelsList.length > 0) {\n              setSelectedModel(modelsList[0])\n            }\n            setIsFetchingModelsList(false)\n          }).catch((error)=>{\n            setIsFetchingModelsList(false)\n          })\n        }\n      }\n      , [backendUrl]);\n\n\n  function onModelSelected(event) {\n    setSelectedModel(event.target.value)\n  }\n\n  function enterPressedCallback(promptText) {\n    console.log('API call to DALL-E web service with the following prompt [' + promptText + ']');\n    setIsFetchingImgs(true)\n    callDalleService(backendUrl, promptText, maxImagesPerQuery, selectedModel).then((generatedImgs) => {\n      setGeneratedImages(generatedImgs)\n      setIsFetchingImgs(false)\n    })\n  }\n\n\n  return (\n      <div className={classes.root}>\n        <div className={classes.title}>\n          <Typography variant=\"h3\">\n            DALL-E Playground <span role=\"img\" aria-label=\"sparks-emoji\">✨</span>\n          </Typography>\n        </div>\n\n        <div className={classes.subtitle}>\n          <Typography variant=\"body1\">\n            Put your DALL-E backend URL to start\n          </Typography>\n        </div>\n\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Grid container justify=\"center\" alignItems=\"center\" direction=\"row\" spacing={3}>\n              <Grid item>\n                <BackendUrlInput setBackendValidUrl={setBackendUrl} isLoadingModels={isFetchingModelsList}\n                                 setBackendInvalidUrl={() => {\n                                   setModels([])\n                                   setSelectedModel('')\n                                 }}/>\n              </Grid>\n              <Grid item>\n                <AvailableModelsInput models={models} selectedModel={selectedModel} onModelSelected={onModelSelected}\n                                      disabled={!isBackendUrlValid || isFetchingModelsList}/>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextPromptInput enterPressedCallback={enterPressedCallback} disabled={isFetchingImgs || !isBackendUrlValid || isFetchingModelsList}/>\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" alignItems=\"center\" className={classes.gallery}>\n          {!isFetchingImgs && <GeneratedImageList generatedImages={generatedImages}/>}\n          {isFetchingImgs && <PulseLoader sizeUnit={\"px\"} size={20} color=\"purple\" loading={isFetchingImgs}/>}\n        </Grid>\n      </div>\n  )\n}\n\nexport default withStyles(useStyles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
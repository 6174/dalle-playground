{"version":3,"sources":["backend_api.js","GeneratedImageList.js","TextPromptInput.js","BackendUrlInput.js","utils.js","LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["backendUrl","text","numImages","a","Promise","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","statusText","_","reject","setTimeout","race","JsonBigint","parse","catch","ImageObject","imgData","alt","src","GeneratedImageList","generatedImages","Grid","container","alignItems","spacing","map","generatedImg","index","item","key","withStyles","inputPrompt","marginTop","classes","enterPressedCallback","disabled","useState","promptText","setPromptText","TextField","className","id","label","helperText","placeholder","value","onChange","event","target","fullWidth","onKeyPress","inputBackend","minWidth","loadingSpinner","paddingTop","setBackendValidUrl","isValidBackendEndpoint","setIsValidBackendEndpoint","isCheckingBackendEndpoint","setIsCheckingBackendEndpoint","setBackendUrl","newBackendUrl","str","RegExp","test","checkIfValidBackend","isValid","useEffect","qsBackendUrl","qs","window","location","search","ignoreQueryPrefix","alignContent","xs","error","sizeUnit","size","color","loading","processingSteps","root","display","flexDirection","textAlign","loadingText","isLoading","textIdx","setTextIdx","intervalID","length","clearInterval","Typography","variant","width","margin","title","marginBottom","playgroundSection","justifyContent","flex","settingsSection","padding","maxWidth","searchQueryCard","imagesPerQueryControl","formControl","gallery","isFetchingImgs","setIsFetchingImgs","setGeneratedImages","apiError","setApiError","imagesPerQuery","setImagesPerQuery","validBackendUrl","role","aria-label","Card","CardContent","console","log","callDalleService","generatedImgs","message","FormControl","InputLabel","Select","labelId","Array","from","keys","num","MenuItem","FormHelperText","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bed58d80.chunk.js","sourcesContent":["import JsonBigint from \"json-bigint\";\n\nconst REQUEST_TIMEOUT_SEC = 60000\n\nexport async function callDalleService(backendUrl, text, numImages) {\n    const response = await Promise.race([\n        (await fetch(backendUrl + `/dalle`, {\n                method: 'POST',\n                headers: {\n                    'Bypass-Tunnel-Reminder': \"go\",\n                    'mode': 'no-cors'\n                },\n                body: JSON.stringify({\n                    text,\n                    'num_images': numImages,\n                })\n            }\n        ).then((response)=> {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response\n        })).text(), new Promise((_, reject) => setTimeout(\n            () => reject(new Error('Timeout')), REQUEST_TIMEOUT_SEC))\n    ]);\n    return JsonBigint.parse(response)\n}\n\nexport async function checkIfValidBackend(backendUrl) {\n    return await fetch(backendUrl, {\n        headers: {\n            'Bypass-Tunnel-Reminder': \"go\",\n            'mode': 'no-cors'\n        }\n    }).then(function (response) {\n        return true\n    }).catch(() => {\n        return false\n    })\n}\n","import React from 'react';\nimport {Grid} from \"@material-ui/core\";\n\nconst ImageObject = ({imgData, alt}) => <img src={`data:image/png;base64,${imgData}`} alt={alt}/>\n\nconst GeneratedImageList = ({generatedImages}) => {\n    return (\n        <Grid container alignItems=\"center\" spacing={3}>\n            {generatedImages.map((generatedImg, index) => {\n                return (\n                    <Grid item key={index}>\n                        <ImageObject imgData={generatedImg} alt={index}/>\n                    </Grid>\n                )\n            })}\n        </Grid>\n    )\n}\n\nexport default GeneratedImageList;\n","import React, {useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {TextField} from \"@material-ui/core\";\n\nconst useStyles = () => ({\n    inputPrompt: {\n        marginTop: '20px',\n    },\n})\n\nconst TextPromptInput = ({classes, enterPressedCallback, disabled}) => {\n    const [promptText, setPromptText] = useState('');\n\n    function handleTextPromptKeyPressed(event) {\n        if (event.key === 'Enter') {\n            enterPressedCallback(promptText)\n        }\n    }\n\n    function onTextChanged(event) {\n        setPromptText(event.target.value)\n    }\n\n    return (\n        <TextField className={classes.inputPrompt} id=\"prompt-input\" label=\"Text prompt\"\n                   helperText=\"hit Enter to search\"\n                   placeholder=\"e.g. an apple on a table\" value={promptText}\n                   onChange={onTextChanged} fullWidth\n                   onKeyPress={handleTextPromptKeyPressed} disabled={disabled}/>\n    )\n}\n\nexport default withStyles(useStyles)(TextPromptInput);","import React, {useEffect, useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport {isValidURL} from \"./utils\";\nimport {PulseLoader} from \"react-spinners\";\nimport qs from \"qs\";\nimport {checkIfValidBackend} from \"./backend_api\";\n\nconst useStyles = () => ({\n    inputBackend: {\n        minWidth: '220px',\n    },\n    loadingSpinner: {\n        paddingTop: '20px !important',\n    }\n})\n\nconst BackendUrlInput = ({\n                             classes, disabled, setBackendValidUrl,\n                             isValidBackendEndpoint, setIsValidBackendEndpoint,\n                             isCheckingBackendEndpoint, setIsCheckingBackendEndpoint,\n                         }) => {\n    const [backendUrl, setBackendUrl] = useState('');\n\n    useEffect(() => {\n        const qsBackendUrl = qs.parse(window.location.search, {ignoreQueryPrefix: true}).backendUrl\n        if (qsBackendUrl) {\n            onChange(qsBackendUrl)\n        }\n    }, [setBackendUrl])\n\n    function onChange(newBackendUrl) {\n        if (isValidURL(newBackendUrl)) {\n            setIsCheckingBackendEndpoint(true)\n            checkIfValidBackend(newBackendUrl).then((isValid) => {\n                setIsValidBackendEndpoint(isValid)\n                if (isValid) {\n                    setBackendValidUrl(newBackendUrl)\n                }\n                setIsCheckingBackendEndpoint(false)\n            }).catch(() => {\n                setIsCheckingBackendEndpoint(false)\n            })\n        } else {\n            setIsValidBackendEndpoint(false)\n        }\n\n        setBackendUrl(newBackendUrl)\n    }\n\n    return (\n        <Grid container spacing={1} alignContent=\"center\">\n            <Grid item xs={10}>\n                <TextField className={classes.inputBackend} fullWidth id=\"standard-basic\"\n                           label=\"Backend URL\" value={backendUrl} disabled={disabled}\n                           error={!isValidBackendEndpoint && backendUrl !== ''}\n                           helperText={!isValidBackendEndpoint && backendUrl !== '' && \"No running DALL-E server with this URL\"}\n                           onChange={(event) => onChange(event.target.value)}/>\n            </Grid>\n            {isCheckingBackendEndpoint && <Grid item className={classes.loadingSpinner} xs={2}>\n                <PulseLoader sizeUnit={\"px\"} size={5} color=\"purple\"\n                             loading={isCheckingBackendEndpoint}/>\n            </Grid>}\n        </Grid>\n    )\n}\n\nexport default withStyles(useStyles)(BackendUrlInput);\n","export function isValidURL(str) {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}","import {PulseLoader} from \"react-spinners\";\nimport {Typography} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nconst useStyles = () => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n    },\n    loadingText: {\n        paddingTop: '20px',\n    }\n});\n\nconst processingSteps = ['Generating images 👨🏽‍🎨', 'Doing fancy calculations ✨'];\n\nconst LoadingSpinner = ({classes, isLoading}) => {\n    const [textIdx, setTextIdx] = useState(0);\n\n    useEffect(() => {\n        const intervalID = setTimeout(() => {\n            let currentIdx = textIdx;\n            if (currentIdx + 1 < processingSteps.length) {\n                setTextIdx(currentIdx + 1)\n            }\n\n        }, 10000);\n\n        return () => clearInterval(intervalID);\n    }, []);\n\n    const loadingText = processingSteps[textIdx % processingSteps.length];\n    return (\n        <div className={classes.root}>\n            <PulseLoader sizeUnit={\"px\"} size={20} color=\"purple\" loading={isLoading}/>\n            <Typography className={classes.loadingText} variant={\"h6\"}>{loadingText}</Typography>\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(LoadingSpinner)","import React, {useState} from 'react';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {\n    Card, CardContent, FormControl, FormHelperText,\n    InputLabel, MenuItem, Select, Typography\n} from \"@material-ui/core\";\nimport {callDalleService} from \"./backend_api\";\nimport GeneratedImageList from \"./GeneratedImageList\";\nimport TextPromptInput from \"./TextPromptInput\";\n\nimport \"./App.css\";\nimport BackendUrlInput from \"./BackendUrlInput\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst useStyles = () => ({\n    root: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        margin: '60px 0px 60px 0px',\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    title: {\n        marginBottom: '20px',\n    },\n    playgroundSection: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        flex: 1,\n        marginTop: '20px',\n        width: '90%'\n    },\n    settingsSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '1em',\n        maxWidth: '320px',\n    },\n    searchQueryCard: {\n        marginBottom: '20px'\n    },\n    imagesPerQueryControl: {\n        marginTop: '20px',\n    },\n    formControl: {\n        margin: \"20px\",\n        minWidth: 120,\n    },\n    gallery: {\n        display: 'flex',\n        maxWidth: '50%',\n        flex: '1',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '1rem',\n    },\n});\n\n\nconst App = ({classes}) => {\n    const [backendUrl, setBackendUrl] = useState('');\n    const [isFetchingImgs, setIsFetchingImgs] = useState(false);\n    const [isCheckingBackendEndpoint, setIsCheckingBackendEndpoint] = useState(false);\n    const [isValidBackendEndpoint, setIsValidBackendEndpoint] = useState(true);\n    const [generatedImages, setGeneratedImages] = useState([]);\n    const [apiError, setApiError] = useState('')\n    const [imagesPerQuery, setImagesPerQuery] = useState(2);\n\n    const imagesPerQueryOptions = 10\n    const validBackendUrl = isValidBackendEndpoint && backendUrl\n\n    function enterPressedCallback(promptText) {\n        console.log('API call to DALL-E web service with the following prompt [' + promptText + ']');\n        setApiError('')\n        setIsFetchingImgs(true)\n        callDalleService(backendUrl, promptText, imagesPerQuery).then((generatedImgs) => {\n            setGeneratedImages(generatedImgs)\n            setIsFetchingImgs(false)\n        }).catch((error) => {\n            console.log('Error querying DALL-E service.', error)\n            if (error.message === 'Timeout') {\n                setApiError('Timeout querying DALL-E service (>1min). Consider reducing the images per query or use a stronger backend.')\n            } else {\n                setApiError('Error querying DALL-E service. Check your backend server logs.')\n            }\n            setIsFetchingImgs(false)\n        })\n    }\n\n    function getGalleryContent() {\n        if (apiError) {\n            return <Typography variant=\"h5\" color=\"error\">{apiError}</Typography>\n        }\n\n        if (isFetchingImgs) {\n            return <LoadingSpinner isLoading={isFetchingImgs}/>\n        }\n\n        return <GeneratedImageList generatedImages={generatedImages}/>\n    }\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.title}>\n                <Typography variant=\"h3\">\n                    DALL-E Playground <span role=\"img\" aria-label=\"sparks-emoji\">✨</span>\n                </Typography>\n            </div>\n\n            {!validBackendUrl && <div>\n                <Typography variant=\"body1\" color=\"textSecondary\">\n                    Put your DALL-E backend URL to start\n                </Typography>\n            </div>}\n\n            <div className={classes.playgroundSection}>\n                <div className={classes.settingsSection}>\n                    <Card className={classes.searchQueryCard}>\n                        <CardContent>\n                            <BackendUrlInput setBackendValidUrl={setBackendUrl}\n                                             isValidBackendEndpoint={isValidBackendEndpoint}\n                                             setIsValidBackendEndpoint={setIsValidBackendEndpoint}\n                                             setIsCheckingBackendEndpoint={setIsCheckingBackendEndpoint}\n                                             isCheckingBackendEndpoint={isCheckingBackendEndpoint}\n                                             disabled={isFetchingImgs}/>\n                            <TextPromptInput enterPressedCallback={enterPressedCallback}\n                                             disabled={isFetchingImgs || !validBackendUrl}/>\n\n                            <FormControl className={classes.imagesPerQueryControl}\n                                         variant=\"outlined\">\n                                <InputLabel id=\"images-per-query-label\">\n                                    Images per query\n                                </InputLabel>\n                                <Select labelId=\"images-per-query-label\"\n                                        label=\"Images per query\" value={imagesPerQuery}\n                                        disabled={isFetchingImgs}\n                                        onChange={(event) => setImagesPerQuery(event.target.value)}>\n                                    {Array.from(Array(imagesPerQueryOptions).keys()).map((num) => {\n                                        return <MenuItem key={num} value={num}>{num}</MenuItem>\n                                    })}\n                                </Select>\n                                <FormHelperText>More images = slower query</FormHelperText>\n                            </FormControl>\n                        </CardContent>\n                    </Card>\n                </div>\n                <div className={classes.gallery}>\n                    {getGalleryContent()}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}